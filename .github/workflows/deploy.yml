name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps (optional)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python --version

      - name: Build Docker image
        run: |
          docker build -t notely:latest .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # job-wide env (incl. DB URL from secret)
    env:
      HAS_GCP_CREDS: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      ARTIFACT_REPO:  ${{ secrets.ARTIFACT_REPO }}
      REGION: us-central1
      IMAGE_URL: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/notely:latest
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: No creds -> skip deploy (but still run DB checks if present)
        if: env.HAS_GCP_CREDS == ''
        run: |
          echo "No GCP credentials found. Will skip Cloud Run deploy."
          echo "Local deploy handled via Docker + ngrok."

      - name: Checkout
        uses: actions/checkout@v4

      # --- MIGRATIONS: install goose + run up BEFORE deploy ---
      - name: Install goose (DB migration tool)
        run: |
          set -e
          GOOSE_VERSION=v3.20.0
          curl -sSL -o goose.zip https://github.com/pressly/goose/releases/download/${GOOSE_VERSION}/goose_Linux_x86_64.zip
          unzip goose.zip goose
          sudo mv goose /usr/local/bin/
          goose -version

      # Passe MIGRATIONS_DIR ggf. an: z. B. "./migrations" oder "./notely/migrations"
      - name: Run DB migrations
        env:
          # ensure DATABASE_URL available to goose
          DATABASE_URL: ${{ env.DATABASE_URL }}
          MIGRATIONS_DIR: ./migrations
        run: |
          if [ -z "${DATABASE_URL}" ]; then
            echo "DATABASE_URL is empty. Skipping migrations."
            exit 0
          fi
          echo "Running migrations in ${MIGRATIONS_DIR} against ${DATABASE_URL%%\?*}"
          goose -dir "${MIGRATIONS_DIR}" postgres "${DATABASE_URL}" up

      # --- REAL DEPLOY only if creds exist ---
      - name: Set up gcloud
        if: env.HAS_GCP_CREDS != ''
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ env.HAS_GCP_CREDS }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        if: env.HAS_GCP_CREDS != ''
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev -q

      - name: Deploy to Cloud Run
        if: env.HAS_GCP_CREDS != ''
        run: |
          gcloud run deploy notely \
            --image ${{ env.IMAGE_URL }} \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --project ${{ env.GCP_PROJECT_ID }} \
            --max-instances=4
